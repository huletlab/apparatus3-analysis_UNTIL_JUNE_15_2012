APP3-ANALYSIS

The base path where all this code is stored will be referred to as $(APP3-CPP)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%% THIRD PARTY OPEN-SOURCE LIBRARIES %%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

The APP3-ANALYSIS code package uses the following open source libraries:

--- simpleini

This contains the main functions required to read/write .INI files. To use them
all one needs to do is include the file called "SimpleIni.h",  all the function
declarations and definitions are inside this file. 


--- tiff-3.9.4

This is the libtiff library version 3.9.4 downloaded from www.libtiff.org.
You need to compile it before you can use it.  To do so go inside the
$(APP3-CPP)/tiff-3.9.4  directory and type

	% ./configure
	% make

Do NOT type

	% make install

as this will attempt to copy all the libraries and header files into places
where they are accesible to everyone, suchs /usr/lib or /usr/include.   It is
best to try to keep everything in this code self-contained. 
 
After compiling, the header files will be accesible in
$(APP3-CPP)/tiff-3.9.4/libtiff/ and the shared library will be accessible at
$(APP3-CPP)/tiff-3.9.4/libtiff/.libs/libtiff.so

--- gsl-1.15

This is the GNU Scientific Library version 1.15.   You need to compile it
before you can use it.  To do so go inside $(APP3-CPP)/gsl-1.15 and type

	% ./configure
	% make

In this case also do NOT type 
 
	% make install

as this will attempt to copy all the libraries and header files into places
where they are accesible to everyone, suchs /usr/lib or /usr/include.   It is
best to try to keep everything in this code self-contained. 

The shared library will be accessible at $(APP3-CPP)/gsl-1.15/.libs/libgsl.so,
and the header files will be accesible at $(APP3-CPP)/gsl-1.15/gsl  

--- cfitsio

This is the CFITSIO library for reading and writing files in FITS format.  To
compile it go inside $(APP3-CPP)/cfitsio and type 
	
	% ./configure 
	% make

Again, no need to do 'make install'.   

--- CCFits

This is the object oriented interface to the cfitsio library.  To compile it
you have to compile cfitsio first.  Then configure CCFits by typing

	% ./configure --with-cfitsio-include=$(PATH)  --with-cfitsio-libdir=$(PATH)

where $(PATH) is the ABSOLUTE path to your cfitsio library.  For instance in my
case I used

	% ./configure
	 --with-cfitsio-include=/home/pd3/apparatus3-analysis/cfitsio
	 --with-cfitsio-libdir=/home/pd3/apparatus3-analysis/cfitsio

After CCFits is configured, then proceed to type

	% make

The header files will be located in $(APP3-CPP)/CCfits/ and the shared library
wiLl be in $(APP3-CPP)/CCfits/.libs/libCCfits.so

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%% RUN-TIME LOADING OF OPEN-SOURCE LIBRARIES %%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

When compiling code that uses any of the open souce libraries described above,
make sure that the library path is sent to the linker using the -R (rpath)
option.   The compiler can send this option to the linker using the -Xlinker
flag.  Using this option guarantess that the correct shared library will be
found and used by the executable at run time.   

If you are unsure of the location from which an executable is loading it's
shared libraries do

	% ldd executable

to find out. 

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%% APP3-ANALYSIS HELPER OBJECTS %%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

The sections below describe the utilities or objects that APP3-ANALYSIS usess
to carry out a great part of it's functionality.  The instructions to compile
any of these utilities/objects are as follows:

	% cd $(APP3-CPP)
	% ./configure
	% cd $(APP3-CPP)/utilxx
	% make

The configure script is used to modify the Makefiles and set the appropriate
paths for the run time loading of any shared libraries.


--- qini

Defines a utility 'qini' that can be used to query report lines from the
command line.  It also defines functions to be called by other code, it does so
in the file qini_utils.cpp , the headers for this functions are in qini.h.  To
use the utils the calling code needs to include the headers and the object
qini_utils.o

After compilation, the utility will be copied to the $(APP3-CPP)/bin/
directory.  The qini_utils.o object will be at $(APP3-CPP)/qini .


--- utils


